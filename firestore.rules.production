rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== HELPER FUNCTIONS ====================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // Check if request is coming from a Cloud Function
    // Cloud Functions have admin privileges and bypass these rules
    
    // ==================== USER PROFILES ====================
    // Users can only read/write their own profile data
    
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) 
        && isValidEmail()
        && request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt'])
        && request.resource.data.email is string
        && request.resource.data.email == request.auth.token.email
        && request.resource.data.displayName is string
        && request.resource.data.displayName.size() >= 2
        && request.resource.data.displayName.size() <= 50
        && request.resource.data.createdAt is timestamp;
      
      allow update: if isOwner(userId) 
        && isValidEmail()
        // Only allow updating specific fields
        && !('email' in request.resource.data.diff(resource.data).affectedKeys())
        && !('createdAt' in request.resource.data.diff(resource.data).affectedKeys())
        // Validate displayName if being updated
        && (!('displayName' in request.resource.data.diff(resource.data).affectedKeys()) 
            || (request.resource.data.displayName is string
                && request.resource.data.displayName.size() >= 2
                && request.resource.data.displayName.size() <= 50));
      
      allow delete: if false; // Never allow profile deletion
    }
    
    // ==================== REWARDS ====================
    // READ ONLY for users - ALL WRITES via Cloud Functions
    
    match /rewards/{userId} {
      allow read: if isOwner(userId);
      
      // NO client-side writes allowed
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ==================== USER STATS ====================
    // READ ONLY for users - ALL WRITES via Cloud Functions
    
    match /userStats/{userId} {
      allow read: if isOwner(userId);
      
      // NO client-side writes allowed
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ==================== TRANSACTIONS ====================
    // READ ONLY for users - ALL WRITES via Cloud Functions
    
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      // NO client-side writes allowed - only Cloud Functions can create transactions
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    // ==================== ACHIEVEMENTS ====================
    // READ ONLY for users - ALL WRITES via Cloud Functions
    
    match /achievements/{userId} {
      allow read: if isOwner(userId);
      allow write: if false;
      
      match /earned/{achievementId} {
        allow read: if isOwner(userId);
        allow write: if false;
      }
    }
    
    // ==================== DUSTBIN LOCATIONS ====================
    // Public read for authenticated users, admin write only
    
    match /dustbins/{dustbinId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins via Cloud Functions
    }
    
    // ==================== LEADERBOARD ====================
    // Public read, backend write only
    
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions can update leaderboard
    }
    
    // ==================== REPORTS ====================
    // Users can create and read their own reports
    
    match /reports/{reportId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.type is string
        && request.resource.data.type in ['bug', 'feature', 'abuse', 'other']
        && request.resource.data.details is string
        && request.resource.data.details.size() >= 10
        && request.resource.data.details.size() <= 1000
        && request.resource.data.createdAt is timestamp
        && request.resource.data.status == 'pending';
      
      allow update, delete: if false;
    }
    
    // ==================== DEPOSITS ====================
    // Users can read their own deposit history
    // Create is allowed but validated heavily
    
    match /deposits/{depositId} {
      allow read: if isAuthenticated() 
        && resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.type is string
        && request.resource.data.location is string
        && request.resource.data.timestamp is timestamp
        // Prevent backdating deposits by more than 5 minutes
        && request.resource.data.timestamp > request.time - duration.value(5, 'm')
        && request.resource.data.timestamp <= request.time;
      
      allow update, delete: if false; // Deposits are immutable
    }
    
    // ==================== ADMIN ====================
    // Only for users with custom admin claims
    
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
        && request.auth.token.admin == true;
    }
    
    // ==================== DEFAULT DENY ====================
    // Deny all other access by default (security by default)
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

