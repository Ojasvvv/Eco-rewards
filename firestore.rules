rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // User profiles - users can only read/write their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidEmail();
      allow update: if isOwner(userId) && isValidEmail();
      allow delete: if false; // Prevent deletion
      
      // Validate user data structure
      allow write: if request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt'])
        && request.resource.data.email is string
        && request.resource.data.displayName is string
        && request.resource.data.createdAt is timestamp;
    }
    
    // User rewards - users can only read/write their own rewards
    match /rewards/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) 
        && request.resource.data.points is int
        && request.resource.data.points >= 0
        && request.resource.data.points <= 10000; // Max points validation
      allow update: if isOwner(userId)
        && request.resource.data.points is int
        && request.resource.data.points >= 0
        && request.resource.data.points <= 10000
        && request.resource.data.points >= resource.data.points - 100; // Prevent large deductions (anti-fraud)
      allow delete: if false;
    }
    
    // User transactions - read-only for users, write via backend only
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if false; // Only backend should write transactions
    }
    
    // Achievements - users can read their own, write via cloud functions only
    match /achievements/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only cloud functions should manage achievements
      
      // Sub-collection for individual achievements
      match /earned/{achievementId} {
        allow read: if isOwner(userId);
        allow write: if false;
      }
    }
    
    // Dustbin locations - public read, admin write only
    match /dustbins/{dustbinId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins/backend should manage dustbins
    }
    
    // Leaderboard - public read, backend write only
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only backend should update leaderboard
    }
    
    // Reports - users can create their own reports, read their own
    match /reports/{reportId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.type is string
        && request.resource.data.details is string
        && request.resource.data.details.size() >= 10
        && request.resource.data.details.size() <= 1000
        && request.resource.data.createdAt is timestamp;
      allow update, delete: if false;
    }
    
    // Admin collection - only for admins
    match /admin/{document=**} {
      allow read, write: if false; // Implement custom admin claims for this
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

